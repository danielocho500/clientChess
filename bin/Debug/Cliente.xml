<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cliente</name>
    </assembly>
    <members>
        <member name="T:Cliente.Configuration">
            <summary>
            Lógica de interacción para Configuration.xaml
            </summary>
            <summary>
            Configuration
            </summary>
        </member>
        <member name="M:Cliente.Configuration.#ctor(System.Int32)">
            <summary>
            Incia la ventana Configuracion
            </summary>
            <param name="idUser"> id del usuario solicitante</param>
        </member>
        <member name="M:Cliente.Configuration.LoadClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Verifica la seleccion y actualiza el idioma usando un archivo de tipo resx.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Configuration.ComboBoxSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Identifica la seleccion dentro del combo box.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Configuration.CloseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Configuration.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Cliente.Connected.is_Connected">
            <summary>
            Variable para saber el estado de la conexion
            </summary>
        </member>
        <member name="T:Cliente.GetCodeMatch">
            <summary>
            logica de interaciion para GetCodeMatch.xaml
            </summary>
            <summary>
            GetCodeMatch
            </summary>
        </member>
        <member name="M:Cliente.GetCodeMatch.#ctor(System.Int32)">
            <summary>
            Incia la ventana GetCodeMatch y verifica la conexion con el servidor.
            </summary>
            <param name="idUser"> id del usuario solicitante</param>
        </member>
        <member name="M:Cliente.GetCodeMatch.JoinMatch(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Inicia la ventana Play.
            </summary>
            <param name="usernameRival"> nombre del rival</param>
            <param name="username"> nombre del solicitante</param>
            <param name="codeMatch"> codigo de la partida</param>
            <param name="isWhite"> juega blancas o no</param>
        </member>
        <member name="M:Cliente.GetCodeMatch.ValidateCodeStatus(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Metodo no implementado.
            </summary>
            <param name="status"></param>
            <param name="usernameRival"></param>
            <param name="username"></param>
            <param name="codeMatch"></param>
            <param name="isWhite"></param>
        </member>
        <member name="M:Cliente.GetCodeMatch.ExitClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana y elimina el codigo del servidor
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.GetCodeMatch.Cliente#ChessService#ISendInvitationServiceCallback#GetCodeMatch(System.Boolean,System.String)">
            <summary>
            el servidor manda el codigo de la partida
            </summary>
            <param name="status"> status del codigo</param>
            <param name="code"> codigo de la partida</param>
        </member>
        <member name="M:Cliente.GetCodeMatch.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cliente.Invitations">
            <summary>
            Logica de interaccion para el archivo Invitations.xaml.cs
            </summary>
            <summary>
            Invitations
            </summary>
        </member>
        <member name="M:Cliente.Invitations.#ctor(System.Int32)">
            <summary>
            inicia la ventana Invitations con las invitaciondes del id user que solicita y verifica la conexion
            </summary>
            <param name="idUser"> id del usuario</param>
        </member>
        <member name="M:Cliente.Invitations.ReciveRequest(System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            recibe una solicitud de amistad
            </summary>
            <param name="users"></param>
        </member>
        <member name="M:Cliente.Invitations.CloseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Invitations.AcceptClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Acepta una solicitud de amistad y envia la informacion al server
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Invitations.DenyClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Rechaza una solicitud de amistad y envia la informacion al server
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Invitations.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cliente.JoinMatch">
            <summary>
            Logica de interaccion para el archivo JoinMatch.xaml.cs
            </summary>
            <summary>
            JoinMatch
            </summary>
        </member>
        <member name="M:Cliente.JoinMatch.#ctor(System.Int32)">
            <summary>
            Inicia la ventana JoinMatch
            </summary>
            <param name="idUser"></param>
        </member>
        <member name="M:Cliente.JoinMatch.GetCodeMatch(System.Boolean,System.String)">
            <summary>
            Método no usado por esta clase.
            </summary>
            <param name="status"></param>
            <param name="code"></param>
        </member>
        <member name="M:Cliente.JoinMatch.ValidateCodeStatus(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Regresa el estado del codigo de juego, invocado por el servidor.
            </summary>
            <param name="status"> estado del codigo</param>
            <param name="usernameRival"> usuario del rival</param>
            <param name="username"> usuario del solicitante</param>
            <param name="matchCode"> codigo de la partida</param>
            <param name="isWhite"> bool para saber si juega blancas</param>
        </member>
        <member name="M:Cliente.JoinMatch.ExitClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.JoinMatch.JoinClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Verifica el campo tbCode, la conexion y manda peticion de validacion de codigo al servidor.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.JoinMatch.Cliente#ChessService#ISendInvitationServiceCallback#JoinMatch(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Método no usado por esta clase.
            </summary>
            <param name="usernameRival"></param>
            <param name="username"></param>
            <param name="codeMatch"></param>
            <param name="white"></param>
        </member>
        <member name="M:Cliente.JoinMatch.CountSpaces(System.String)">
            <summary>
            Cuenta los espacios en blanco de un texto.
            </summary>
            <param name="text"> texto a evaluar</param>
            <returns>regresa count con el numero de espacios en blanco.</returns>
        </member>
        <member name="M:Cliente.JoinMatch.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cliente.MainChess">
            <summary>
            Logica de interaccion para el archivo MainChess.xaml.cs
            </summary>
            <summary>
            MainChess
            </summary>
        </member>
        <member name="M:Cliente.MainChess.#ctor(System.Int32)">
            <summary>
            Inicia la ventana MainChess y conecta con el servidor.
            </summary>
            <param name="idUser"> agrega el id a la lista de usuarios conectados </param>
        </member>
        <member name="M:Cliente.MainChess.NewGameClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Incia la ventana GetCodeMatch y verifica la conexión al server
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainChess.JoinToGameClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inia la ventana JoinMatch y verifica la conexión al server
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainChess.StatsClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Incia la ventana Stats y verifica la conexión al server
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainChess.RankingClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inicia la ventana Ranking y verifica la conexión al server
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainChess.LogoutClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Quita el idUser de los usuarios conectados y cierra la ventana MainChess
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainChess.ConfigClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inicia la ventana Configuracion y verifica la conexión al server.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainChess.InvitationsClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inicia la ventana Invitation y verifica la conexión al server
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainChess.AddUserClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Verifica el campo txtAddUser , la conexión al server y manda la peticion al servidor.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainChess.SendRequestStatus(System.Int32)">
            <summary>
            Lo invoca el server con el estado de la peticion de amistad.
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:Cliente.MainChess.GetUsers(System.String[],System.String[])">
            <summary>
            Recupera tus amigos conectados y los desconectados.
            </summary>
            <param name="usernamesConnected"> amigos conectados</param>
            <param name="usernamesDisconnected">amigos desconectados</param>
        </member>
        <member name="M:Cliente.MainChess.NewConecction(System.String)">
            <summary>
            Pone a un amigo que estaba en lista desconectado lo pone en la lista conectado.
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:Cliente.MainChess.NewDisconecction(System.String)">
            <summary>
            Pone a un amigo que estaba en lista conectado lo pone en la lista desconectado.
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:Cliente.MainChess.WindowClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Metodo al evento cuandos se cierra la ventana, borra al id del usuario de los usuarios conectados. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainChess.UpdadteUsers(System.String[],System.String[])">
            <summary>
            Actualiza los amigos conectados y desconectados de la tabla.
            </summary>
            <param name="usernamesConnected"> amigos conectados</param>
            <param name="usernamesDisconnected">amigos desconectados</param>
        </member>
        <member name="M:Cliente.MainChess.SeeConecction">
            <summary>
            Se usa para verificar que el cliente tiene conexion con el server.
            </summary>
        </member>
        <member name="M:Cliente.MainChess.newFriend(System.String,System.Boolean)">
            <summary>
            Cuando agregas a alguien lo añade a la lista de conectados.
            </summary>
            <param name="username"></param>
            <param name="isConnected"></param>
        </member>
        <member name="M:Cliente.MainChess.CountSpaces(System.String)">
            <summary>
            Cuenta los espacios en blanco de un texto.
            </summary>
            <param name="text"> texto a evaluar</param>
            <returns>regresa count con el numero de espacios en blanco.</returns>
        </member>
        <member name="M:Cliente.MainChess.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cliente.Play">
            <summary>
            Logica de interaccion para el archivo Play.xaml.cs
            </summary>
            <summary>
            Play
            </summary>
        </member>
        <member name="M:Cliente.Play.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Inicia la ventana con los datos de la partida.
            </summary>
            <param name="idUser"> id usuario</param>
            <param name="username"> nombre del usuario</param>
            <param name="rival"> usuario del oponente</param>
            <param name="MatchCode"> codigo de la partida</param>
            <param name="white"> si esta jugando blancas o negras</param>
        </member>
        <member name="M:Cliente.Play.GetTimeLeftFormat(System.Int32)">
            <summary>
            Convierte el tiempo en segundos a formato con minutos.
            </summary>
            <param name="secs"> segundos </param>
            <returns>el tiempo en formato con minutos format </returns>
        </member>
        <member name="M:Cliente.Play.SendClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evalua el campo tbMessage, la conexion y manda un mensaje a el otro usuario
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Play.RendirseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            verifica conexion con el server y Manda al servidor peticion de rendicion
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Play.ReciveMessage(System.String,System.String)">
            <summary>
            Recive mensajes y escribe en el list view
            </summary>
            <param name="message"></param>
            <param name="time"></param>
        </member>
        <member name="M:Cliente.Play.MatchEnds(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Es llamada por el server e indica si el jugador gano o perdio la partida
            </summary>
            <param name="youWon"> si ganaste o no</param>
            <param name="oldElo"> elo anterior </param>
            <param name="newElo"> elo actual</param>
        </member>
        <member name="M:Cliente.Play.Update">
            <summary>
            Actualiza las imagenes de los botones segun su estado
            </summary>
        </member>
        <member name="M:Cliente.Play.Clic(System.String)">
            <summary>
            checa el estado del boton para realizar una accion, verifica conexion, ver a que boton cliqueaste y en base a eso realiza un accion
            </summary>
            <param name="button"> cordenada del boton</param>
        </member>
        <member name="M:Cliente.Play.SetOptionMoves(System.Collections.Generic.List{System.String})">
            <summary>
            Cambia las imagende los botones indicando que es posible moverse a ellas.
            </summary>
            <param name="btnMove"></param>
        </member>
        <member name="M:Cliente.Play.WindowClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Cierra la ventana, termina la partida y elimna la conexion.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Play.MovePiece(System.String,System.String,System.Int32)">
            <summary>
            Lo llama el servidor e indica un  movimiento del enemigo
            </summary>
            <param name="previousPosition"> posicion previa </param>
            <param name="newPosition"> entrega Nueva posicion</param>
            <param name="newTime"> nuevo tiempo de juego</param>
        </member>
        <member name="M:Cliente.Play.PrepareDictionary">
            <summary>
            Crear el diccionario de los botones
            </summary>
        </member>
        <member name="M:Cliente.Play.DisableOptionsToMove">
            <summary>
            Desactiva botones a los que te puedes mover
            </summary>
        </member>
        <member name="M:Cliente.Play.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cliente.playLogic.ButtonInfo">
            <summary>
            Lógica de interacción para ButtonInfo.cs
            </summary>
        </member>
        <member name="M:Cliente.playLogic.ButtonInfo.#ctor(Cliente.playLogic.SquareStatus,System.Int32,System.Int32,System.Windows.Controls.Button)">
            <summary>
            Informacion del boton
            </summary>
            <param name="squareStatus"> estado del botón</param>
            <param name="column"> Columna en la que esta el botón</param>
            <param name="row"> fila en la que esta el botón  </param>
            <param name="button"> referencia al elemento axml</param>
        </member>
        <member name="T:Cliente.playLogic.SquareStatus">
            <summary>
            Estados en lo que puede estar un boton.
            </summary>
        </member>
        <member name="T:Cliente.playLogic.Moves">
            <summary>
            Lógica de interacción para Moves.cs
            </summary>
        </member>
        <member name="M:Cliente.playLogic.Moves.GetMovesWhitePawn(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,Cliente.playLogic.ButtonInfo})">
            <summary>
            Obtiene las posiciones a las que se puede mover el peon blanco 
            </summary>
            <param name="column"> colomnas en la que se encuentra</param>
            <param name="row"> fila en la que se encuentra</param>
            <param name="Squares"> a las que se puede mover</param>
            <returns></returns>
        </member>
        <member name="M:Cliente.playLogic.Moves.GetMovesBlackPawn(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,Cliente.playLogic.ButtonInfo})">
            <summary>
            Obtiene las posiciones a las que se puede mover el peon negro 
            </summary>
            <param name="column"> colomnas en la que se encuentra</param>
            <param name="row"> fila en la que se encuentra</param>
            <param name="Squares"> a las que se puede mover</param>
            <returns></returns>
        </member>
        <member name="M:Cliente.playLogic.Moves.GetMovesKing(System.Boolean,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,Cliente.playLogic.ButtonInfo})">
            <summary>
            Obtiene las posiciones a las que se puede mover el rey
            </summary>
            <param name="column"> colomnas en la que se encuentra</param>
            <param name="row"> fila en la que se encuentra</param>
            <param name="Squares"> a las que se puede mover</param>
            <param name="isWhite"> para saber si el jugador juga blancas o negras</param>
            <returns></returns>
        </member>
        <member name="M:Cliente.playLogic.Moves.GetMovesKnight(System.Boolean,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,Cliente.playLogic.ButtonInfo})">
            <summary>
            Obtiene las posiciones a las que se puede mover el caballo
            </summary>
            <param name="column"> colomnas en la que se encuentra</param>
            <param name="row"> fila en la que se encuentra</param>
            <param name="Squares"> a las que se puede mover</param>
            <param name="isWhite"> para saber si el jugador juga blancas o negras</param>
            <returns></returns>
        </member>
        <member name="M:Cliente.playLogic.Moves.GetMovesTower(System.Boolean,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,Cliente.playLogic.ButtonInfo})">
            <summary>
            Obtiene las posiciones a las que se puede mover la torre
            </summary>
            <param name="column"> colomnas en la que se encuentra</param>
            <param name="row"> fila en la que se encuentra</param>
            <param name="Squares"> a las que se puede mover</param>
            <param name="isWhite"> para saber si el jugador juga blancas o negras</param>
            <returns></returns>
        </member>
        <member name="M:Cliente.playLogic.Moves.GetMovesBishop(System.Boolean,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,Cliente.playLogic.ButtonInfo})">
            <summary>
            Obtiene las posiciones a las que se puede mover el alfil
            </summary>
            <param name="column"> colomnas en la que se encuentra</param>
            <param name="row"> fila en la que se encuentra</param>
            <param name="Squares"> a las que se puede mover</param>
            <param name="isWhite"> para saber si el jugador juga blancas o negras</param>
            <returns></returns>
        </member>
        <member name="M:Cliente.playLogic.Moves.GetMovesQueen(System.Boolean,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,Cliente.playLogic.ButtonInfo})">
            <summary>
            Obtiene las posiciones a las que se puede mover la reyna
            </summary>
            <param name="column"> colomnas en la que se encuentra</param>
            <param name="row"> fila en la que se encuentra</param>
            <param name="Squares"> a las que se puede mover</param>
            <param name="isWhite"> para saber si el jugador juga blancas o negras</param>
            <returns></returns>
        </member>
        <member name="M:Cliente.playLogic.Moves.GetSquareName(System.Int32,System.Int32)">
            <summary>
            Obtiene el nombre de la coordenada.
            </summary>
            <param name="column"> columnas en las que se encuentra</param>
            <param name="row">filas en las que se encuentra</param>
            <returns></returns>
        </member>
        <member name="T:Cliente.Properties.Langs.Lang">
            <summary>
              Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
              búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.accept">
            <summary>
              Busca una cadena traducida similar a Accept.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.addFriend">
            <summary>
              Busca una cadena traducida similar a Add Friend.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.alreadyLogged">
            <summary>
              Busca una cadena traducida similar a This account is already logged.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.back">
            <summary>
              Busca una cadena traducida similar a Back.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.badEmail">
            <summary>
              Busca una cadena traducida similar a The email is invalid.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.badPassword">
            <summary>
              Busca una cadena traducida similar a The passwords are invalid.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.black">
            <summary>
              Busca una cadena traducida similar a Black.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.cancel">
            <summary>
              Busca una cadena traducida similar a Cancel:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.close">
            <summary>
              Busca una cadena traducida similar a Close.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.code">
            <summary>
              Busca una cadena traducida similar a Code:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.codeFail">
            <summary>
              Busca una cadena traducida similar a Incorrect Validation.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.codeIncorrect">
            <summary>
              Busca una cadena traducida similar a Incorrect Code.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.codeSuccess">
            <summary>
              Busca una cadena traducida similar a Correct Validation.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.confirm">
            <summary>
              Busca una cadena traducida similar a Confirm.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.confirmPass">
            <summary>
              Busca una cadena traducida similar a Confirm Password:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.deny">
            <summary>
              Busca una cadena traducida similar a Deny.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.dontHaveAccount">
            <summary>
              Busca una cadena traducida similar a You don&apos;t have account?.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.elo">
            <summary>
              Busca una cadena traducida similar a Elo:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.eloMax">
            <summary>
              Busca una cadena traducida similar a Max Elo:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.email">
            <summary>
              Busca una cadena traducida similar a Email:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.emailRegistered">
            <summary>
              Busca una cadena traducida similar a The email is already register.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.emptyFields">
            <summary>
              Busca una cadena traducida similar a Empty fields.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.en">
            <summary>
              Busca una cadena traducida similar a English.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.enterUsername">
            <summary>
              Busca una cadena traducida similar a Please, enter an username.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.error">
            <summary>
              Busca una cadena traducida similar a Error in validation.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.errorLogin">
            <summary>
              Busca una cadena traducida similar a Error while logging in.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.errorOcurred">
            <summary>
              Busca una cadena traducida similar a an error occurred.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.es">
            <summary>
              Busca una cadena traducida similar a Spanish.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.exit">
            <summary>
              Busca una cadena traducida similar a Exit.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.friendRequest">
            <summary>
              Busca una cadena traducida similar a Friends Request.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.friends">
            <summary>
              Busca una cadena traducida similar a Friends.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.giveUP">
            <summary>
              Busca una cadena traducida similar a Give Up.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.incorrectCredentials">
            <summary>
              Busca una cadena traducida similar a Incorrect credentials.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.invitations">
            <summary>
              Busca una cadena traducida similar a Invitations.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.join">
            <summary>
              Busca una cadena traducida similar a Join.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.joinGame">
            <summary>
              Busca una cadena traducida similar a Join Game.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.load">
            <summary>
              Busca una cadena traducida similar a Load.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.login">
            <summary>
              Busca una cadena traducida similar a Login.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.logout">
            <summary>
              Busca una cadena traducida similar a Logout.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.matchPlayed">
            <summary>
              Busca una cadena traducida similar a Matches Played:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.mustWrite">
            <summary>
              Busca una cadena traducida similar a You must write a message.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.newGame">
            <summary>
              Busca una cadena traducida similar a New Game.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.noConecction">
            <summary>
              Busca una cadena traducida similar a No connection with the server.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.noSpaces">
            <summary>
              Busca una cadena traducida similar a Don&apos;t left blank spaces in the fields.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.passInclude">
            <summary>
              Busca una cadena traducida similar a The password must include.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.passRule1">
            <summary>
              Busca una cadena traducida similar a 1. At least one lower case latter.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.passRule2">
            <summary>
              Busca una cadena traducida similar a 2. At least one upper case latter.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.passRule3">
            <summary>
              Busca una cadena traducida similar a 3. At least special character.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.passRule4">
            <summary>
              Busca una cadena traducida similar a 4. At least one number.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.passRule5">
            <summary>
              Busca una cadena traducida similar a 5. At least 8 characters lenght.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.password">
            <summary>
              Busca una cadena traducida similar a Password:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.putCode">
            <summary>
              Busca una cadena traducida similar a Put the code.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.ranking">
            <summary>
              Busca una cadena traducida similar a Ranking.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.refreshedLang">
            <summary>
              Busca una cadena traducida similar a Language updated.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.register">
            <summary>
              Busca una cadena traducida similar a Register.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.requestAlready">
            <summary>
              Busca una cadena traducida similar a Request already sent.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.requestAuto">
            <summary>
              Busca una cadena traducida similar a You cannot send request to your own user.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.requestError">
            <summary>
              Busca una cadena traducida similar a Send Error.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.requestFriendAlready">
            <summary>
              Busca una cadena traducida similar a Already Friends.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.requestRejected">
            <summary>
              Busca una cadena traducida similar a Request rejected.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.samePass">
            <summary>
              Busca una cadena traducida similar a The password are not the same.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.selectUser">
            <summary>
              Busca una cadena traducida similar a Select an user in the list.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.send">
            <summary>
              Busca una cadena traducida similar a Send.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.stats">
            <summary>
              Busca una cadena traducida similar a Stats.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.successRequest">
            <summary>
              Busca una cadena traducida similar a Request sent.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.surrender">
            <summary>
              Busca una cadena traducida similar a Do you want to Surrender?.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.TurnOf">
            <summary>
              Busca una cadena traducida similar a Turn of:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.username">
            <summary>
              Busca una cadena traducida similar a Username:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.userNotFound">
            <summary>
              Busca una cadena traducida similar a User not found.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.userTaken">
            <summary>
              Busca una cadena traducida similar a The user is already taken.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.validate">
            <summary>
              Busca una cadena traducida similar a Validate.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.welcome">
            <summary>
              Busca una cadena traducida similar a Welcome.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.white">
            <summary>
              Busca una cadena traducida similar a White.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.win">
            <summary>
              Busca una cadena traducida similar a Matches Win:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.you">
            <summary>
              Busca una cadena traducida similar a You.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.youLose">
            <summary>
              Busca una cadena traducida similar a You Lose :c.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.yourCode">
            <summary>
              Busca una cadena traducida similar a Your Code is:.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Langs.Lang.youWin">
            <summary>
              Busca una cadena traducida similar a You Win!!.
            </summary>
        </member>
        <member name="T:Cliente.Properties.Resources">
            <summary>
              Clase de recurso fuertemente tipado para buscar cadenas traducidas, etc.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Resources.ResourceManager">
            <summary>
              Devuelve la instancia ResourceManager almacenada en caché utilizada por esta clase.
            </summary>
        </member>
        <member name="P:Cliente.Properties.Resources.Culture">
            <summary>
              Invalida la propiedad CurrentUICulture del subproceso actual para todas las
              búsquedas de recursos usando esta clase de recursos fuertemente tipados.
            </summary>
        </member>
        <member name="T:Cliente.Ranking">
            <summary>
            Logica de interaccion para el archivo Ranking.xaml.cs
            </summary>
            <summary>
            Ranking
            </summary>
        </member>
        <member name="M:Cliente.Ranking.#ctor(System.Int32)">
            <summary>
            Inicializa la ventana y pide al servidor los datos del ranking
            </summary>
            <param name="idUser"> id del usuario solicitante </param>
        </member>
        <member name="M:Cliente.Ranking.ShowRanking(System.Tuple{System.String,System.Int32}[])">
            <summary>
            Muestra los datos del ranking el una tabla, llamado por el servidor.
            </summary>
            <param name="rank"> contiene la informacion de los usuarios ordenado respecto al elo.</param>
        </member>
        <member name="M:Cliente.Ranking.ExitClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana Ranking
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Ranking.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cliente.Register">
            <summary>
            Logica de interaccion para el archivo Register.xaml.cs
            </summary>
            <summary>
            Register
            </summary>
        </member>
        <member name="M:Cliente.Register.#ctor">
            <summary>
            Inicializa la ventana Register.xaml
            </summary>
        </member>
        <member name="M:Cliente.Register.RegisterClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Evalua todos los campos y envia peticion de registro al servidor con la informacion evaluada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Register.CancelClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana Register
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Register.ValidateClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Pregunta al server si el codigo de verificacion es codigo es correcto. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Register.CheckPasswords">
            <summary>
            Verifica si las contraseñas son iguales
            </summary>
            <returns>Regresa true o false segun sea el caso</returns>
        </member>
        <member name="M:Cliente.Register.ValidateEmail">
            <summary>
            Evalua si el email cumple con las reglas escritas.
            </summary>
            <returns> regresa si el email es valído </returns>
        </member>
        <member name="M:Cliente.Register.SafePassword(System.String)">
            <summary>
            Evalua si la contraseña es segura o confiable.
            </summary>
            <param name="passWord"></param>
            <returns> regresa true o false dependiendo si la contraseña es o no segura</returns>
        </member>
        <member name="M:Cliente.Register.ValidateCode(System.Int32)">
            <summary>
            El server manda el estatus del código.
            </summary>
            <param name="status"> indica el estado del código </param>
        </member>
        <member name="M:Cliente.Register.CountSpaces(System.String)">
            <summary>
            Cuenta los espacios en blanco de un texto.
            </summary>
            <param name="text"> texto a evaluar</param>
            <returns>regresa count con el numero de espacios en blanco.</returns>
        </member>
        <member name="M:Cliente.Register.CodeRecieve(System.Int32)">
            <summary>
            Regresa si se puedo generar el código o no, invocado por el servidor.
            </summary>
            <param name="status"> estado del código</param>
        </member>
        <member name="M:Cliente.Register.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cliente.Stats">
            <summary>
            Logica de interaccion para el archivo Stats.xaml.cs
            </summary>
            <summary>
            Stats
            </summary>
        </member>
        <member name="M:Cliente.Stats.#ctor(System.Int32)">
            <summary>
            Inicializa la ventana con las datos recuperados del usuario
            </summary>
            <param name="idUser"></param>
        </member>
        <member name="M:Cliente.Stats.ShowStats(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Muestra los datos recuperados en pantalla.
            </summary>
            <param name="matchesPlayed"></param>
            <param name="matchesWin"></param>
            <param name="eloMax"></param>
            <param name="eloActual"></param>
        </member>
        <member name="M:Cliente.Stats.ExitClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana Stats.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Stats.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cliente.App">
            <summary>
            Lógica de interacción para App.xaml.cs
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:Cliente.App.OnStartup(System.Windows.StartupEventArgs)">
            <summary>
            Para inicar archivos de lang cuando con el idioma especificado.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Cliente.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:Cliente.Login">
            <summary>
            Logica de interaccion para el archivo Login.xaml.cs
            </summary>
            <summary>
            Login
            </summary>
        </member>
        <member name="M:Cliente.Login.#ctor">
            <summary>
            Incializa la ventana Login
            </summary>
        </member>
        <member name="M:Cliente.Login.LoginStatus(System.Int32,System.Int32)">
            <summary>
            Regresa el estatus del login, invocado por el servidor
            </summary>
            <param name="status"> estado del logueo</param>
            <param name="idUser"> id del usuario solicitante </param>
        </member>
        <member name="M:Cliente.Login.LoginClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Verifica los campos, verifica la conexión y manda petición del logueo al servidor
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Login.BackClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana y abre MainWindow
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.Login.CountSpaces(System.String)">
            <summary>
            Cuenta los espacios en blanco de un texto.
            </summary>
            <param name="text"> texto a evaluar</param>
            <returns>regresa count con el numero de espacios en blanco.</returns>
        </member>
        <member name="M:Cliente.Login.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Cliente.MainWindow">
            <summary>
            Logica de interaccion para el archivo MainWindow.xaml.cs
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:Cliente.MainWindow.#ctor">
            <summary>
            Inicia la ventana MainWindow.
            </summary>
        </member>
        <member name="M:Cliente.MainWindow.LoginClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Incia la ventana Login
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainWindow.RegisterClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inicia la ventana Register
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainWindow.CloseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cierra la ventana MainWindow
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cliente.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
