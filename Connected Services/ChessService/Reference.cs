//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cliente.ChessService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChessService.IRegisterService", CallbackContract=typeof(Cliente.ChessService.IRegisterServiceCallback))]
    public interface IRegisterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterService/GenerateCodeRegister", ReplyAction="http://tempuri.org/IRegisterService/GenerateCodeRegisterResponse")]
        bool GenerateCodeRegister(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegisterService/GenerateCodeRegister", ReplyAction="http://tempuri.org/IRegisterService/GenerateCodeRegisterResponse")]
        System.Threading.Tasks.Task<bool> GenerateCodeRegisterAsync(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRegisterService/VerificateCode")]
        void VerificateCode(string codeuser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRegisterService/VerificateCode")]
        System.Threading.Tasks.Task VerificateCodeAsync(string codeuser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRegisterServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRegisterService/ValidateCode")]
        void ValidateCode(bool codeStatus, int message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRegisterServiceChannel : Cliente.ChessService.IRegisterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterServiceClient : System.ServiceModel.DuplexClientBase<Cliente.ChessService.IRegisterService>, Cliente.ChessService.IRegisterService {
        
        public RegisterServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RegisterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RegisterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RegisterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RegisterServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool GenerateCodeRegister(string username, string password, string email) {
            return base.Channel.GenerateCodeRegister(username, password, email);
        }
        
        public System.Threading.Tasks.Task<bool> GenerateCodeRegisterAsync(string username, string password, string email) {
            return base.Channel.GenerateCodeRegisterAsync(username, password, email);
        }
        
        public void VerificateCode(string codeuser) {
            base.Channel.VerificateCode(codeuser);
        }
        
        public System.Threading.Tasks.Task VerificateCodeAsync(string codeuser) {
            return base.Channel.VerificateCodeAsync(codeuser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChessService.ILoginService", CallbackContract=typeof(Cliente.ChessService.ILoginServiceCallback))]
    public interface ILoginService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoginService/Login")]
        void Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoginService/Login")]
        System.Threading.Tasks.Task LoginAsync(string username, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoginService/LoginStatus")]
        void LoginStatus(bool status, string message, int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginServiceChannel : Cliente.ChessService.ILoginService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginServiceClient : System.ServiceModel.DuplexClientBase<Cliente.ChessService.ILoginService>, Cliente.ChessService.ILoginService {
        
        public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(string username, string password) {
            base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChessService.IConnectionService", CallbackContract=typeof(Cliente.ChessService.IConnectionServiceCallback))]
    public interface IConnectionService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectionService/Check")]
        void Check();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectionService/Check")]
        System.Threading.Tasks.Task CheckAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConnectionServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectionService/IsConnected")]
        void IsConnected(bool status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConnectionServiceChannel : Cliente.ChessService.IConnectionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectionServiceClient : System.ServiceModel.DuplexClientBase<Cliente.ChessService.IConnectionService>, Cliente.ChessService.IConnectionService {
        
        public ConnectionServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ConnectionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ConnectionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ConnectionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ConnectionServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Check() {
            base.Channel.Check();
        }
        
        public System.Threading.Tasks.Task CheckAsync() {
            return base.Channel.CheckAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChessService.IRequestService", CallbackContract=typeof(Cliente.ChessService.IRequestServiceCallback))]
    public interface IRequestService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRequestService/SendRequest")]
        void SendRequest(string username, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRequestService/SendRequest")]
        System.Threading.Tasks.Task SendRequestAsync(string username, int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRequestServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRequestService/SendRequestStatus")]
        void SendRequestStatus(bool status, string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRequestServiceChannel : Cliente.ChessService.IRequestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RequestServiceClient : System.ServiceModel.DuplexClientBase<Cliente.ChessService.IRequestService>, Cliente.ChessService.IRequestService {
        
        public RequestServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RequestServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RequestServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RequestServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RequestServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendRequest(string username, int idUser) {
            base.Channel.SendRequest(username, idUser);
        }
        
        public System.Threading.Tasks.Task SendRequestAsync(string username, int idUser) {
            return base.Channel.SendRequestAsync(username, idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChessService.IRespondService", CallbackContract=typeof(Cliente.ChessService.IRespondServiceCallback))]
    public interface IRespondService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRespondService/GetRequests")]
        void GetRequests(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRespondService/GetRequests")]
        System.Threading.Tasks.Task GetRequestsAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRespondService/ConfirmRequest")]
        void ConfirmRequest(bool accept, int idUserSend, int idUserRecive);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRespondService/ConfirmRequest")]
        System.Threading.Tasks.Task ConfirmRequestAsync(bool accept, int idUserSend, int idUserRecive);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRespondServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRespondService/ReciveRequest")]
        void ReciveRequest(System.Collections.Generic.Dictionary<int, string> users);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRespondServiceChannel : Cliente.ChessService.IRespondService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RespondServiceClient : System.ServiceModel.DuplexClientBase<Cliente.ChessService.IRespondService>, Cliente.ChessService.IRespondService {
        
        public RespondServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RespondServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RespondServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RespondServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RespondServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetRequests(int idUser) {
            base.Channel.GetRequests(idUser);
        }
        
        public System.Threading.Tasks.Task GetRequestsAsync(int idUser) {
            return base.Channel.GetRequestsAsync(idUser);
        }
        
        public void ConfirmRequest(bool accept, int idUserSend, int idUserRecive) {
            base.Channel.ConfirmRequest(accept, idUserSend, idUserRecive);
        }
        
        public System.Threading.Tasks.Task ConfirmRequestAsync(bool accept, int idUserSend, int idUserRecive) {
            return base.Channel.ConfirmRequestAsync(accept, idUserSend, idUserRecive);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChessService.IFriendService", CallbackContract=typeof(Cliente.ChessService.IFriendServiceCallback))]
    public interface IFriendService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendService/Connected")]
        void Connected(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendService/Connected")]
        System.Threading.Tasks.Task ConnectedAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendService/Disconnected")]
        void Disconnected(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendService/Disconnected")]
        System.Threading.Tasks.Task DisconnectedAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendService/GetUsers")]
        void GetUsers(string[] usernamesConnected, string[] usernamesDisconnected);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendService/NewConecction")]
        void NewConecction(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendService/NewDisconecction")]
        void NewDisconecction(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendServiceChannel : Cliente.ChessService.IFriendService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendServiceClient : System.ServiceModel.DuplexClientBase<Cliente.ChessService.IFriendService>, Cliente.ChessService.IFriendService {
        
        public FriendServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connected(int id) {
            base.Channel.Connected(id);
        }
        
        public System.Threading.Tasks.Task ConnectedAsync(int id) {
            return base.Channel.ConnectedAsync(id);
        }
        
        public void Disconnected(int id) {
            base.Channel.Disconnected(id);
        }
        
        public System.Threading.Tasks.Task DisconnectedAsync(int id) {
            return base.Channel.DisconnectedAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChessService.ISendInvitationService", CallbackContract=typeof(Cliente.ChessService.ISendInvitationServiceCallback))]
    public interface ISendInvitationService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendInvitationService/GenerateCodeInvitation")]
        void GenerateCodeInvitation(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendInvitationService/GenerateCodeInvitation")]
        System.Threading.Tasks.Task GenerateCodeInvitationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendInvitationService/ValidateCodeInvitation")]
        void ValidateCodeInvitation(int id, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendInvitationService/ValidateCodeInvitation")]
        System.Threading.Tasks.Task ValidateCodeInvitationAsync(int id, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendInvitationService/DeleteCodeInvitation")]
        void DeleteCodeInvitation(string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendInvitationService/DeleteCodeInvitation")]
        System.Threading.Tasks.Task DeleteCodeInvitationAsync(string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISendInvitationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendInvitationService/GetCodeMatch")]
        void GetCodeMatch(bool status, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendInvitationService/ValidateCodeStatus")]
        void ValidateCodeStatus(bool status, string usernameRival, string username, string codeMatch, bool white);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISendInvitationService/JoinMatch")]
        void JoinMatch(string usernameRival, string username, string codeMatch, bool white);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISendInvitationServiceChannel : Cliente.ChessService.ISendInvitationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendInvitationServiceClient : System.ServiceModel.DuplexClientBase<Cliente.ChessService.ISendInvitationService>, Cliente.ChessService.ISendInvitationService {
        
        public SendInvitationServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SendInvitationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SendInvitationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SendInvitationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SendInvitationServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GenerateCodeInvitation(int id) {
            base.Channel.GenerateCodeInvitation(id);
        }
        
        public System.Threading.Tasks.Task GenerateCodeInvitationAsync(int id) {
            return base.Channel.GenerateCodeInvitationAsync(id);
        }
        
        public void ValidateCodeInvitation(int id, string code) {
            base.Channel.ValidateCodeInvitation(id, code);
        }
        
        public System.Threading.Tasks.Task ValidateCodeInvitationAsync(int id, string code) {
            return base.Channel.ValidateCodeInvitationAsync(id, code);
        }
        
        public void DeleteCodeInvitation(string code) {
            base.Channel.DeleteCodeInvitation(code);
        }
        
        public System.Threading.Tasks.Task DeleteCodeInvitationAsync(string code) {
            return base.Channel.DeleteCodeInvitationAsync(code);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChessService.IMatchService", CallbackContract=typeof(Cliente.ChessService.IMatchServiceCallback))]
    public interface IMatchService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/SendMessage")]
        void SendMessage(bool isWhite, string message, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(bool isWhite, string message, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/sendConnection")]
        void sendConnection(bool isWhite, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/sendConnection")]
        System.Threading.Tasks.Task sendConnectionAsync(bool isWhite, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/giveUp")]
        void giveUp(bool isWhite, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/giveUp")]
        System.Threading.Tasks.Task giveUpAsync(bool isWhite, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/win")]
        void win(bool isWhite, bool won, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/win")]
        System.Threading.Tasks.Task winAsync(bool isWhite, bool won, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/move")]
        void move(bool isWhite, string matchCode, string previousPosition, string newPosition, int timeleft);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/move")]
        System.Threading.Tasks.Task moveAsync(bool isWhite, string matchCode, string previousPosition, string newPosition, int timeleft);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/ReciveMessage")]
        void ReciveMessage(string message, string time);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/MatchEnds")]
        void MatchEnds(bool youWon, int oldElo, int newElo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/movePiece")]
        void movePiece(string previousPosition, string newPosition, int timeLeft);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchServiceChannel : Cliente.ChessService.IMatchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchServiceClient : System.ServiceModel.DuplexClientBase<Cliente.ChessService.IMatchService>, Cliente.ChessService.IMatchService {
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(bool isWhite, string message, string matchCode) {
            base.Channel.SendMessage(isWhite, message, matchCode);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(bool isWhite, string message, string matchCode) {
            return base.Channel.SendMessageAsync(isWhite, message, matchCode);
        }
        
        public void sendConnection(bool isWhite, string matchCode) {
            base.Channel.sendConnection(isWhite, matchCode);
        }
        
        public System.Threading.Tasks.Task sendConnectionAsync(bool isWhite, string matchCode) {
            return base.Channel.sendConnectionAsync(isWhite, matchCode);
        }
        
        public void giveUp(bool isWhite, string matchCode) {
            base.Channel.giveUp(isWhite, matchCode);
        }
        
        public System.Threading.Tasks.Task giveUpAsync(bool isWhite, string matchCode) {
            return base.Channel.giveUpAsync(isWhite, matchCode);
        }
        
        public void win(bool isWhite, bool won, string matchCode) {
            base.Channel.win(isWhite, won, matchCode);
        }
        
        public System.Threading.Tasks.Task winAsync(bool isWhite, bool won, string matchCode) {
            return base.Channel.winAsync(isWhite, won, matchCode);
        }
        
        public void move(bool isWhite, string matchCode, string previousPosition, string newPosition, int timeleft) {
            base.Channel.move(isWhite, matchCode, previousPosition, newPosition, timeleft);
        }
        
        public System.Threading.Tasks.Task moveAsync(bool isWhite, string matchCode, string previousPosition, string newPosition, int timeleft) {
            return base.Channel.moveAsync(isWhite, matchCode, previousPosition, newPosition, timeleft);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChessService.IGetStatsService", CallbackContract=typeof(Cliente.ChessService.IGetStatsServiceCallback))]
    public interface IGetStatsService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGetStatsService/getStats")]
        void getStats(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGetStatsService/getStats")]
        System.Threading.Tasks.Task getStatsAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGetStatsServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGetStatsService/ShowStats")]
        void ShowStats(int Matches_played, int Matches_win, decimal WinP, int eloMax, int eloActual);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGetStatsServiceChannel : Cliente.ChessService.IGetStatsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStatsServiceClient : System.ServiceModel.DuplexClientBase<Cliente.ChessService.IGetStatsService>, Cliente.ChessService.IGetStatsService {
        
        public GetStatsServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GetStatsServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GetStatsServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GetStatsServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GetStatsServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void getStats(int id) {
            base.Channel.getStats(id);
        }
        
        public System.Threading.Tasks.Task getStatsAsync(int id) {
            return base.Channel.getStatsAsync(id);
        }
    }
}
